var N = null;var searchIndex = {};
searchIndex["ift"]={"doc":"IFT (interface templates)","items":[[4,"IfTError","ift","Some errors that can come from the evaluation of the template",N,N],[13,"Utf8","","Error parsing string to utf8",0,N],[13,"Io","","IO error reading template",0,N],[13,"Pest","","Pest parse error",0,N],[13,"IfTFlagError","","Error parsing a flag",0,N],[13,"IfTArgumentError","","Error parsing an argument",0,N],[5,"eval","","Evaluate a interface template",N,[[["str"]],["result",["vec","error"]]]],[5,"evals","","Just like `eval`. Returns the first IpAddr as an option. None if empty vector.",N,[[["str"]],["option",["ipaddr"]]]],[0,"rfc","","to get specific information about rfcs used by the templates",N,N],[3,"Rfc6890Entry","ift::rfc","Entry containing everything from the table specified in RFC6890",N,N],[12,"address_block","","IpNet block",1,N],[12,"name","","Name from RFC",1,N],[12,"rfc","","Original RFC",1,N],[12,"allocation_date","","Allocation Date",1,N],[12,"termination_date","","If terminated by when",1,N],[12,"source","","Is a source",1,N],[12,"destination","","Is a destination",1,N],[12,"forwardable","","Is forwardable",1,N],[12,"global","","Is global",1,N],[12,"reserved_by_protocol","","Is reserved",1,N],[3,"WithRfc6890","","Used to check IpAddr's against all the rfc 6890 entries and find the one that matches the most specific definition",N,N],[12,"entries","","vector of all of the available entries",2,N],[11,"create","","Build the WithRfc6890, by creating the list of Rfc6890Entry's",2,[[],["withrfc6890"]]],[11,"is_forwardable","","RFC6890 https://tools.ietf.org/rfc/rfc6890.txt",2,[[["self"],["ipaddr"]],["bool"]]],[11,"is_global","","RFC6890 https://tools.ietf.org/rfc/rfc6890.txt",2,[[["self"],["ipaddr"]],["bool"]]],[11,"from","ift","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"as_fail","","",0,[[["self"]],["fail"]]],[11,"from","ift::rfc","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"fmt","ift","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","ift::rfc","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","ift","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","",0,[[["self"]],["option",["str"]]]],[11,"cause","","",0,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]]],"paths":[[4,"IfTError"],[3,"Rfc6890Entry"],[3,"WithRfc6890"]]};
initSearch(searchIndex);
